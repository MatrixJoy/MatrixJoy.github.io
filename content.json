{"meta":{"title":"Matrix's blog","subtitle":"","description":"","author":"Matrix Joy","url":"http://matrixJoy.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-02-07T16:24:24.859Z","updated":"2020-02-07T16:24:24.859Z","comments":true,"path":"about/index.html","permalink":"http://matrixjoy.github.io/about/index.html","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Android应用开发工程师"},{"title":"404 Not Found","date":"2020-02-07T06:29:55.917Z","updated":"2020-02-07T06:29:55.917Z","comments":true,"path":"404.html","permalink":"http://matrixjoy.github.io/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2020-02-07T06:27:43.555Z","updated":"2020-02-07T06:27:43.555Z","comments":true,"path":"blog/categories/index.html","permalink":"http://matrixjoy.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-02-07T06:28:39.018Z","updated":"2020-02-07T06:28:39.018Z","comments":true,"path":"blog/tags/index.html","permalink":"http://matrixjoy.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"大佬们","date":"2020-02-07T11:04:06.503Z","updated":"2020-02-07T11:04:06.503Z","comments":true,"path":"friends/index.html","permalink":"http://matrixjoy.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"Build FFmpeg for Android Step by Step","slug":"ffmpeg-build-for-android","date":"2020-02-25T14:02:16.000Z","updated":"2020-02-25T16:32:44.661Z","comments":true,"path":"2020/02/25/ffmpeg-build-for-android/","link":"","permalink":"http://matrixjoy.github.io/2020/02/25/ffmpeg-build-for-android/","excerpt":"","text":"前言作为一名从事音视频开发的android应用开发者怎么能不懂如何给android编译ffmpge呢？ 于是我打开了万能的搜索引擎输入如何给android编译ffmpeg果然给了我很多结果，然后随便打开一看就是你要这样然后那样就可以愉快的编译了，这里我就好奇了为啥要这么写脚本呀？如果换了一个ffmpge版本或者ndk版本进行了升级我是不是就搞不定了。 本着能够弄懂的原则咱们不拘泥于能编译出来一个动态库更多的还是希望能知其然也知其所以然，话不多说咱们开始。 准备工作需要先做好如下的准备工作： 一台电脑最好是*unix系统。 下载ffmpeg源码注意是源码 本文基于4.2.2版本 下载ndk版本 本文基于19c 开始编译首先打开ffmpeg解压缩后的目录其中有一个configure的可执行文件他就是负责整个ffmpeg编译的配置文件，提供了很多动态可配置的能力，我们可以通过执行 1.&#x2F;configure --help 查询支持配置的具体细节。 其实所有关于给Android编译ffmpeg文章写的编写脚本就是给configure进行参数化配置，所以这里有必要了解几个参数名： --prefix 编译文件输出目录，也就是我们编译好的so库输出的目录位置 --arch 这是要编译库的cpu架构 对于Android无非这几种arm、x86 现在我们主要考虑的就是arm架构的兼容 --target-os 编译的目标系统版本 咱们这里当然是android --sysroot 这个是交叉编译相关的根目录 咱们这里对应的是ndk中的 sysroot 目录 ndk r19 对应的是 toolchains/llvm/prebuilt/darwin-x86_64/sysroot --cross-prefix 交叉编译相关的依赖目录下的一系列文件，以arm架构为例，其对应的是ndk中 toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/ arm-linux-androideabi- 在ndk r19有所不同google对其进行了收敛对应的目录是 toolchains/llvm/prebuilt/darwin-x86_64/bin/arm-linux-androideabi- --cc 交叉编译编译器路径 clang 还是 gcc 这里得注意ndk r17 之后 gcc 编译被从 ndk 中移除了所以只支持 clang，还是以arm架构为例 toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gcc 在ndk r19中google对其进行了分版本处理所以其对应的路径是 toolchains/llvm/prebuilt/darwin-x86_64/bin/armv7a-linux-androideabi${版本号}-clang 所以说只要弄懂了上面几个参数的含义，编写编译脚本也就好写了。 可能有的教程还会说要改configure 里so文件输出的后缀名，这个就得看具体的ffmpeg版本的配置了，本文基于4.2.2所以毋需手动修改，具体是否需要修改可以在文件中搜索# build settings字段，看齐输出名字的配置格式即可，而不是傻瓜式的别个咋个写的就咋个改。 了解了上述知识后，就可以愉快的编写脚本了，就算后面换了ffmpeg版本或者ndk版本咱也不怕。 12345678910111213141516171819202122232425262728293031323334353637383940#!/bin/sh# 要编译的架构CPU=arm# so 输出目录PREFIX=$(pwd)/android/$CPU# ndk下载解压目录NDK_HOEM=/Users/matrix/Downloads/android-ndk-r19c# 交叉编译依赖的工具链TOOLCHAIN=$NDK_HOEM/toolchains/llvm/prebuilt/darwin-x86_64# Android OS 依赖的相关目录和头文件的根目录SYSROOT=$TOOLCHAIN/sysroot/./configure \\ --prefix=$PREFIX \\ --arch=$CPU \\ --target-os=android \\ --sysroot=$&#123;SYSROOT&#125; \\ --enable-cross-compile \\ --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \\ --cc=$TOOLCHAIN/bin/armv7a-linux-androideabi19-clang \\ --extra-cflags=\"-O3 -fPIC\" \\ --pkg-config=$(which pkg-config) \\ --enable-thumb \\ --disable-static \\ --enable-shared \\ --disable-doc \\ --disable-network \\ --disable-programs \\ --disable-debug \\ --disable-network \\ --disable-avdevice \\ --disable-avfilter \\ --disable-bsfs \\make cleanmake -j$(sysctl -n hw.physicalcpu)make install 对于编译给android用的so库而言，必须--enable-shared 并且--disable-static，关于--extra-cflags=&quot;-O3 -fPIC&quot; 其中-O3是一个编译优化级别，-fPIC必须存在对于编译so库给android而言。$(sysctl -n hw.physicalcpu)是为了支持多核并行编译，这样会比较快。 如上如述基本上就能编译出一个供android使用的ffmpeg的so库了。如果在编译过程中遇到什么库找不到呀，什么的错误可以参考以下参考资料第二条。 参考资料[1] A Story about FFmpeg on Android.Part I: Compilation [2] macOS上编译FFmpeg [3] CompilationGuide/Generic","categories":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://matrixjoy.github.io/categories/ffmpeg/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"http://matrixjoy.github.io/tags/ffmpeg/"},{"name":"android","slug":"android","permalink":"http://matrixjoy.github.io/tags/android/"}]}]}